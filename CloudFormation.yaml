AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Pythia API

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
# Globals:
# Api:
#   # API Gateway endpoint type: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apigateway-restapi-endpointconfiguration.html
#   EndpointConfiguration: REGIONAL

#   # Cross Origin Resources Sharing (CORS): https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-api-corsconfiguration.html
#   Cors:
#     AllowMethods: "'GET, PUT, OPTIONS, POST, DELETE'"
#     AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
#     AllowOrigin: "'*'"

#   # API Gateway access logging: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apigateway-stage-accesslogsetting.html
#   AccessLogSetting:
#     DestinationArn: !Sub
#       - arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/apigateway/pythia-${stageName}:*
#       - stageName: !Ref Stage
#     Format: $context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId

#   # API Gateway authorization: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-controlling-access-to-apis.html
#   #                            https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-api-apiauth.html
#   Auth:
#     Authorizers:
#       CognitoAuth:
#         UserPoolArn: !Join
#           - ""
#           - - !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/
#             - Fn::ImportValue: !Sub auth-delphi-pythia-${Stage}:AuthUserPool
#         AuthType: "COGNITO_USER_POOLS"
#     DefaultAuthorizer: CognitoAuth
#     InvokeRole: CALLER_CREDENTIALS
#     AddDefaultAuthorizerToCorsPreflight: false
#     ApiKeyRequired: false
# # Function:
# Runtime: nodejs12.x
# Tags:
#   Application: pythia-app
#   Stage: !Ref Stage
# Environment:
#   Variables:
#     STAGE: !Ref Stage
Resources:
  BestSellerDataBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: Private
      BucketName: best-seller-data-bucket
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
